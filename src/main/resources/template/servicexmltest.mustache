package {{{basePackage}}}.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.IOException;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.io.Resource;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import {{{basePackage}}}.SimpleBootCxfSystemTestApplication;
import {{{packageNameFromNamespace}}}.{{{faultName}}};
import {{{packageNameFromNamespace}}}.{{{portType}}};
import {{{basePackage}}}.utils.XmlUtils;
import {{{basePackage}}}.utils.XmlUtilsException;
{{#each wsdlproperties}}
import {{{namespace}}}.{{returnType}};
import {{{namespace}}}.{{inputParam}};
{{/each}}
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes=SimpleBootCxfSystemTestApplication.class)
public class {{{portType}}}XmlFileSystemTest {

    @Autowired
    private {{{portType}}} {{{portTypeName}}}SystemTestClient;
    
    {{#each wsdlproperties}}
    @Value(value="classpath:requests/{{operationName}}Test.xml")
    private Resource {{#firstLetterSmallop}}{{operationName}}{{/firstLetterSmallop}}TestXml;
    {{/each}}
    {{#each wsdlproperties}}    
    @Test
    public void {{#firstLetterSmallop}}{{operationName}}{{/firstLetterSmallop}}() throws {{{faultName}}}, XmlUtilsException, IOException {
        // Given
        {{inputParam}} {{#firstLetterSmallInput}}{{inputParam}}{{/firstLetterSmallInput}} = XmlUtils.readSoapMessageFromStreamAndUnmarshallBody2Object({{#firstLetterSmallop}}{{operationName}}{{/firstLetterSmallop}}TestXml.getInputStream(), {{inputParam}}.class);
        
        // When
        // {{returnType}} {{#firstLetterSmallReturn}}{{returnType}}{{/firstLetterSmallReturn}} = {{{portTypeName}}}SystemTestClient.{{#firstLetterSmallop}}{{operationName}}{{/firstLetterSmallop}}({{#firstLetterSmallop}}{{operationName}}{{/firstLetterSmallop}}.<<rmethod>>);
        
        // Then
        //assertNotNull({{#firstLetterSmallReturn}}{{returnType}}{{/firstLetterSmallReturn}});
        
    }
  {{/each}}  
}

