package {{{controllerPackage}}};

//import pk.digitalengineering.namespace.weatherservice.general.ForecastRequest;
//import pk.digitalengineering.namespace.weatherservice.general.ForecastReturn;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

//import com.digitalengineering.pk.transformation.GetCityForecastByZIPOutMapper;

/*
 *  Example-Controller:
 *  This Class would be responsible for Mapping from Request to internal Datamodel (and backwards),
 *  for calling Backend-Services and handling Backend-Exceptions
 *  So it decouples the WSDL-generated Classes from the internal Classes - for when the former changes,
 *  nothing or only the mapping has to be changed
 */ 
@Component
public class {{{porttype}}}Controller {

    private static final Logger LOG = LoggerFactory.getLogger({{{porttype}}}Controller.class);

    public ForecastReturn getCityForecastByZIP(ForecastRequest forecastRequest) throws BusinessException {}
	
	/*
	 * Other Methods would follow here...
	 */
	//public WeatherReturn getCityWeatherByZIP(ForecastRequest forecastRequest) throws BusinessException {}

	//public WeatherInformationReturn getWeatherInformation(String zip) throws BusinessException {}
}
